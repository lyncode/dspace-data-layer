// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.dspace.orm.entity;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.dspace.orm.entity.Bi4Dmap;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Bi4Dmap_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Bi4Dmap.entityManager;
    
    public static final EntityManager Bi4Dmap.entityManager() {
        EntityManager em = new Bi4Dmap().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Bi4Dmap.countBi4Dmaps() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Bi4Dmap o", Long.class).getSingleResult();
    }
    
    public static List<Bi4Dmap> Bi4Dmap.findAllBi4Dmaps() {
        return entityManager().createQuery("SELECT o FROM Bi4Dmap o", Bi4Dmap.class).getResultList();
    }
    
    public static Bi4Dmap Bi4Dmap.findBi4Dmap(Integer mapId) {
        if (mapId == null) return null;
        return entityManager().find(Bi4Dmap.class, mapId);
    }
    
    public static List<Bi4Dmap> Bi4Dmap.findBi4DmapEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Bi4Dmap o", Bi4Dmap.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Bi4Dmap.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Bi4Dmap.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Bi4Dmap attached = Bi4Dmap.findBi4Dmap(this.mapId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Bi4Dmap.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Bi4Dmap.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Bi4Dmap Bi4Dmap.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Bi4Dmap merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
