// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.dspace.orm.model;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.dspace.orm.model.Bitstream;
import org.dspace.orm.model.ChecksumResults;
import org.dspace.orm.model.MostRecentChecksum;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect MostRecentChecksum_Roo_DbManaged {
    
    @OneToOne
    @JoinColumn(name = "bitstream_id", nullable = false, insertable = false, updatable = false)
    private Bitstream MostRecentChecksum.bitstream;
    
    @ManyToOne
    @JoinColumn(name = "result", referencedColumnName = "result_code")
    private ChecksumResults MostRecentChecksum.result;
    
    @Column(name = "to_be_processed")
    @NotNull
    private boolean MostRecentChecksum.toBeProcessed;
    
    @Column(name = "expected_checksum")
    @NotNull
    private String MostRecentChecksum.expectedChecksum;
    
    @Column(name = "current_checksum")
    @NotNull
    private String MostRecentChecksum.currentChecksum;
    
    @Column(name = "last_process_start_date")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "M-")
    private Date MostRecentChecksum.lastProcessStartDate;
    
    @Column(name = "last_process_end_date")
    @NotNull
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "M-")
    private Date MostRecentChecksum.lastProcessEndDate;
    
    @Column(name = "checksum_algorithm")
    @NotNull
    private String MostRecentChecksum.checksumAlgorithm;
    
    @Column(name = "matched_prev_checksum")
    @NotNull
    private boolean MostRecentChecksum.matchedPrevChecksum;
    
    public Bitstream MostRecentChecksum.getBitstream() {
        return bitstream;
    }
    
    public void MostRecentChecksum.setBitstream(Bitstream bitstream) {
        this.bitstream = bitstream;
    }
    
    public ChecksumResults MostRecentChecksum.getResult() {
        return result;
    }
    
    public void MostRecentChecksum.setResult(ChecksumResults result) {
        this.result = result;
    }
    
    public boolean MostRecentChecksum.isToBeProcessed() {
        return toBeProcessed;
    }
    
    public void MostRecentChecksum.setToBeProcessed(boolean toBeProcessed) {
        this.toBeProcessed = toBeProcessed;
    }
    
    public String MostRecentChecksum.getExpectedChecksum() {
        return expectedChecksum;
    }
    
    public void MostRecentChecksum.setExpectedChecksum(String expectedChecksum) {
        this.expectedChecksum = expectedChecksum;
    }
    
    public String MostRecentChecksum.getCurrentChecksum() {
        return currentChecksum;
    }
    
    public void MostRecentChecksum.setCurrentChecksum(String currentChecksum) {
        this.currentChecksum = currentChecksum;
    }
    
    public Date MostRecentChecksum.getLastProcessStartDate() {
        return lastProcessStartDate;
    }
    
    public void MostRecentChecksum.setLastProcessStartDate(Date lastProcessStartDate) {
        this.lastProcessStartDate = lastProcessStartDate;
    }
    
    public Date MostRecentChecksum.getLastProcessEndDate() {
        return lastProcessEndDate;
    }
    
    public void MostRecentChecksum.setLastProcessEndDate(Date lastProcessEndDate) {
        this.lastProcessEndDate = lastProcessEndDate;
    }
    
    public String MostRecentChecksum.getChecksumAlgorithm() {
        return checksumAlgorithm;
    }
    
    public void MostRecentChecksum.setChecksumAlgorithm(String checksumAlgorithm) {
        this.checksumAlgorithm = checksumAlgorithm;
    }
    
    public boolean MostRecentChecksum.isMatchedPrevChecksum() {
        return matchedPrevChecksum;
    }
    
    public void MostRecentChecksum.setMatchedPrevChecksum(boolean matchedPrevChecksum) {
        this.matchedPrevChecksum = matchedPrevChecksum;
    }
    
}
